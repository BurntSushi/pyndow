4.1.2.1
WM_NAME

It says WM_NAME should always be visible in some way. Currently, this isn't the
case for smaller border decorations, which will be used in tiling layouts.

-------------------------------------------------------------------------------
4.1.2.2
WM_ICON_NAME

I haven't touched the WM_ICON_NAME. I don't use it... For panels?

-------------------------------------------------------------------------------
4.1.2.3
WM_NORMAL_HINTS

Haven't used USPosition/PPosition or USSize/PSize. Which means I don't listen
to user/program specified size/position via the WM_NORMAL_HINTS. It also means
I don't distinguish between user specified and program specified size/position
hints.

No support for PAspect. I'm not sure if I want to even bother with this.

PWinGravity is fully implemented (I think).

-------------------------------------------------------------------------------
4.1.2.4
WM_HINTS

No support for icon_window, icon_x, or icon_y. Also, I don't seem to need
icon_mask when using PIL. I do fall back to icon_pixmap if _NET_WM_ICON
is not set.

If input is true, then we'll call SetInputFocus when we want to focus a window.
Also, if WM_TAKE_FOCUS is in WM_PROTOCOLS, we'll send a client message to the
window.

Initial state can be either Normal or Iconic. If Iconic, Pyndow just doesn't
map (when initially managing the window).

Window group... Hmmmm... In the context of WM_HINTS, this field seems to
just be an FYI. However, this might have implications with regards to
WM_CLIENT_LEADER and WM_TRANSIENT_FOR. As of right now, just ignore it.

No obsolete support for MessageHint. No support for Urgency (yet).

-------------------------------------------------------------------------------
4.1.2.5
WM_CLASS

Not doing anything with it at the moment. I'll probably use it for filtering
purposes down the road?

-------------------------------------------------------------------------------
4.1.2.6
WM_TRANSIENT_FOR

Haven't implemented yet, but these are my ideas:

Should be a recursive relationship, where the top parent has transient set to
None. Any direct transient should be added to the parent's transients list.

So each client has a trans_parent property and a trans_children property.

Any time state changes occur to any window in the transient hierarchy, we
should first find the top-most parent, and recursively apply the state change
there. (State changes are (de)iconification, changing desktops, shading?, etc.)

Finally, we must also be sure to keep transients on top of their parents. So
that any time a parent is "focused" or raised in the stack, each of its
child transients should be stacked above their parent. (i.e., simply stack
raised in the proper order.) We must be careful here--what if the parent is
put into a layer above its transient? Therefore, layer changing should be
considered a state change, like above. (i.e., a parent and all its transients
ought to be in the same layer.)

-------------------------------------------------------------------------------
4.1.2.7
WM_PROTOCOLS

Supports WM_TAKE_FOCUS and WM_DELETE_WINDOW.

-------------------------------------------------------------------------------
4.1.2.8
WM_COLORMAP_WINDOWS

I haven't done anything with colormaps... It doesn't even appear (yet) that I
need to...

-------------------------------------------------------------------------------
4.1.2.9
WM_CLIENT_MACHINE

Maybe I'll add this into the title bar if it isn't a localhost machine, but
I haven't yet.

-------------------------------------------------------------------------------
4.1.3.1
WM_STATE

No support for WM_STATE.icon since Pyndow doesn't use icon windows.

-------------------------------------------------------------------------------
4.1.2.3
WM_ICON_SIZE

No support for this. Unless needed, I probably won't implement it.

-------------------------------------------------------------------------------

